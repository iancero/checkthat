[{"path":[]},{"path":"https://iancero.github.io/checkthat/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://iancero.github.io/checkthat/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://iancero.github.io/checkthat/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://iancero.github.io/checkthat/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://iancero.github.io/checkthat/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://iancero.github.io/checkthat/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://iancero.github.io/checkthat/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://iancero.github.io/checkthat/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://iancero.github.io/checkthat/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://iancero.github.io/checkthat/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://iancero.github.io/checkthat/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://iancero.github.io/checkthat/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to checkthat","title":"Contributing to checkthat","text":"outlines propose change checkthat. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://iancero.github.io/checkthat/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to checkthat","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://iancero.github.io/checkthat/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to checkthat","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://iancero.github.io/checkthat/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to checkthat","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"iancero/checkthat\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://iancero.github.io/checkthat/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to checkthat","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://iancero.github.io/checkthat/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to checkthat","text":"Please note checkthat project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://iancero.github.io/checkthat/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 checkthat authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://iancero.github.io/checkthat/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with checkthat","title":"Getting help with checkthat","text":"Thanks using checkthat! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://iancero.github.io/checkthat/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with checkthat","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://iancero.github.io/checkthat/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with checkthat","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://iancero.github.io/checkthat/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with checkthat","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://iancero.github.io/checkthat/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ian Cero. Author, maintainer.","code":""},{"path":"https://iancero.github.io/checkthat/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cero (2023). checkthat: Implements Unit Testing Data Manipulation Pipelines. https://github.com/iancero/checkthat, https://iancero.github.io/checkthat/.","code":"@Manual{,   title = {checkthat: Implements Unit Testing For Data Manipulation Pipelines},   author = {Ian Cero},   year = {2023},   note = {https://github.com/iancero/checkthat, https://iancero.github.io/checkthat/}, }"},{"path":"https://iancero.github.io/checkthat/index.html","id":"checkthat","dir":"","previous_headings":"","what":"Implements Unit Testing For Data Manipulation Pipelines","title":"Implements Unit Testing For Data Manipulation Pipelines","text":"people regularly check data still valid manipulation process critical valid analysis results later . impossible values newly created column? dataframe correct number columns rows join? Despite importance, data checking process usually conducted informally hand eye - instead code (e.g., unit test). something pipeline modified later, can sure everything comes change remains valid? checkthat philosophy already perform good data checks keep . checks even better lived code, rather head. Checkthat therefore provides functions closely resemble checks already hand eye, makes easy also express code.","code":""},{"path":"https://iancero.github.io/checkthat/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Implements Unit Testing For Data Manipulation Pipelines","text":"Checkthat’s main function check_that(.data, ...), takes dataframe first argument, followed number assertions want check dataframe. checks pass, get brief message confirming ’s case. least one check fails, get detailed breakdown went wrong. Additionally, check_that() function designed work base R’s existing logical functions (e.g., (), ()), well ’s set flexible helper functions. Theses helper functions designed readable mirror code already manually eye-balling dataset.","code":"library(checkthat)  mtcars |>   check_that(     all(cyl > 2),     !any(is.na(mpg))   ) #> ✔ all data checks passing mtcars |>   check_that(     all(cyl > 2),     any(mpg > 35)   ) #>  #> ── Data Checks ───────────────────────────────────────────────────────────────── #>  #> ✔ all(cyl > 2) --> TRUE #> ✖ any(mpg > 35) --> FALSE #>  #> ──────────────────────────────────────────────────────────────────────────────── #>  #> Error in `cli_throw_test_error()`: #> ! At least one data check failed. mtcars |>   check_that(     some_of(cyl > 4, at_least = .30, at_most = 25),     whenever(wt < 3, then_expect = mpg > 19),     for_case(2, mpg == 21, hp == 110)   ) #> ✔ all data checks passing"},{"path":"https://iancero.github.io/checkthat/index.html","id":"tidyverse-pipelines","dir":"","previous_headings":"","what":"Tidyverse pipelines","title":"Implements Unit Testing For Data Manipulation Pipelines","text":"check_that() function always invisibly returns .data gave (always unmodified). allows easily integrate directly data manipulation pipelines.","code":"new_mtcars <- mtcars |>   select(mpg) |>   mutate(km_per_litre = 0.425 * mpg) |>   check_that(max(km_per_litre) < 15) #> ✔ all data checks passing  head(new_mtcars) #>                    mpg km_per_litre #> Mazda RX4         21.0       8.9250 #> Mazda RX4 Wag     21.0       8.9250 #> Datsun 710        22.8       9.6900 #> Hornet 4 Drive    21.4       9.0950 #> Hornet Sportabout 18.7       7.9475 #> Valiant           18.1       7.6925"},{"path":"https://iancero.github.io/checkthat/index.html","id":"checking-a-pipeline-at-multiple-points","dir":"","previous_headings":"","what":"Checking a pipeline at multiple points","title":"Implements Unit Testing For Data Manipulation Pipelines","text":"returns dataframe received, check_that() can also used multiple points single pipeline. way, can check multi-step processes unfolding according plan. especially important data tasks sensitive order operations, checks intermediate data wont available end. Consider surprisingly tricky example. Imagine wanted (1) create factor variable (type) designating cars either small (\"sm\") large (\"lg\") based weight (wt). imagine (2) planned filter small cars (3) calculate mean mpg desired_mpg. value might used inform personal purchase decision perhaps establish industry benchmark manufacturer. resulting data pipeline simple, let’s use check_that() multiple points safe. wont access wt variable end pipeline. , right use wt compute type, immediately check weights \"sm\" group less \"lg\" group, intended. end, check desired_mpg within plausible range. , first check throws error stopS pipeline. also saves us inaccurate desired_mpg second check caught. happened? quick reading factor(wt < 3, labels = c(\"sm\", \"lg\"), ordered = TRUE) seems like correctly assign cars correct group. However, labels order function call.1 result, heavy cars mistakenly labelled \"sm\" vice-versa.2 Importantly, mistake () given us erroneously low desired_mpg (b) gone undetected final check_that(desired_mpg > 15). call check_that() earlier pipeline caught error prevented us drawing bad conclusion data later .","code":"mtcars |>   mutate(type = factor(wt < 3, labels = c(\"sm\", \"lg\"), ordered = TRUE)) |>   check_that(max(wt[type == \"sm\"]) <= min(wt[type == \"lg\"])) |>   filter(type == \"sm\") |>   summarise(desired_mpg = mean(mpg)) |>   check_that(desired_mpg > 15) #>  #> ── Data Checks ───────────────────────────────────────────────────────────────── #>  #> ✖ max(wt[type == \"sm\"]) <= min(wt[type == \"lg\"]) --> FALSE #>  #> ──────────────────────────────────────────────────────────────────────────────── #>  #> Error in `cli_throw_test_error()`: #> ! At least one data check failed."},{"path":"https://iancero.github.io/checkthat/index.html","id":"helper-functions","dir":"","previous_headings":"","what":"Helper functions","title":"Implements Unit Testing For Data Manipulation Pipelines","text":"Checkthat’s philosophy existing data checks eye probably already good. major problem live head code. , checkthat provides range helper functions work alongside base R’s existing collection (e.g., (), ()). include basic flexible varieties.","code":""},{"path":"https://iancero.github.io/checkthat/index.html","id":"basic-helpers","dir":"","previous_headings":"Helper functions","what":"Basic helpers","title":"Implements Unit Testing For Data Manipulation Pipelines","text":"basic helpers just syntactic sugar around R’s existing comparison operators: =, <, <=, >, >=. takes logical vector first argument requires specify proportion (p) count (n) values must true.","code":"mtcars |>   check_that(     at_least(mpg < 35, p = .95),     more_than(hp == 110, n = 2),     exactly_equal(cyl == 6, n = 7),     less_than(wt > 3, p = .75),     at_most(is.na(mpg), n = 3),   ) #> ✔ all data checks passing"},{"path":"https://iancero.github.io/checkthat/index.html","id":"flexible-helpers","dir":"","previous_headings":"Helper functions","what":"Flexible helpers","title":"Implements Unit Testing For Data Manipulation Pipelines","text":"remaining helpers include some_of(), whenever(), for_case() flexible basic counterparts. ’re optimized kind semi-approximate data checking likely already eye. people, involves general sense data look like time, exact knowledge specific proportions counts. example, might good reason think some_of() cyl values greater 4, don’t know exactly many. However, know probably at_least 30%, at_most 25 total cases dataset. Anything outside range implausible want guard check_that(). Just like unit tests production code, tests created flexible helper functions technically imperfect leave (possibly important) scenarios addressed. , ’s big range possibilities at_least = .30 at_most = 25, might involve undetected data problem. However, checkthat takes position imperfect tests still valuable informative able take advantage . example, reasons concerned data column crossing at_most = 25, able quickly easily write test combination check_that() some_of(). Moreover, world tests much worse world tests fail cover every case. mind, checkthat’s flexible helper functions designed bring writing tests code quickly easily coding tests already eye.","code":"mtcars |>   check_that(     some_of(cyl > 4, at_least = .30, at_most = 25),     whenever(is_observed = wt < 3, then_expect = mpg > 19),     for_case(2, mpg == 21, hp == 110)   ) #> ✔ all data checks passing"},{"path":"https://iancero.github.io/checkthat/index.html","id":"checking-the-whole-dataframe","dir":"","previous_headings":"","what":"Checking the whole dataframe","title":"Implements Unit Testing For Data Manipulation Pipelines","text":"addition concerns individual rows columns data, may also want perform checks entire dataframe question. cases, check_that() provides .d pronoun, works similarly .x purrr package. short, .d copy data provided check_that(), can use write checks whole dataset. especially useful operations change shape dataset (e.g., pivots, nests, joins). case pivoting, might want check dataset correct anticipated dimensions. join, may want check new column expected location, also unanticipated new rows.","code":"mtcars |>   check_that(     nrow(.d) > 10,     \"mpg\" %in% names(.d)   ) #> ✔ all data checks passing mtcars |>   check_that(ncol(.d) == 11, nrow(.d) == 32) |> # original dimensions   pivot_longer(     cols = everything(),     names_to = \"name\",     values_to = \"values\"   ) |>   check_that(ncol(.d) == 2, nrow(.d) == 32 * 11) # check that cols became rows #> ✔ all data checks passing #> ✔ all data checks passing cyl_ratings_df <- data.frame(cyl = c(4, 6, 8), group = c(\"A\", \"B\", \"C\"))  mtcars |>   left_join(cyl_ratings_df, by = \"cyl\") |>   check_that(     ncol(.d) == 12, # check that there's one new column     names(.d)[length(names(.d))] == \"group\", # check new column is \"group\"     nrow(.d) == 32 # check that no new rows   ) #> ✔ all data checks passing"},{"path":"https://iancero.github.io/checkthat/index.html","id":"alternatives","dir":"","previous_headings":"","what":"Alternatives","title":"Implements Unit Testing For Data Manipulation Pipelines","text":"two pre-existing packages served inspiration checkthat. quite good , depending use case, might better choice . testthat implements unit testing packages currently popular testing package R. goal develop package - rather conduct data analysis - testthat much better choice checkthat. testdat inspired testhat - like checkthat - also implements unit testing data. different checkthat two ways. First, mature package checkthat, therefore potentially stable near term. Second, whereas checkthat designed directly embed tests data manipulation pipelines, testdat designed place tests separate code blocks even files.","code":""},{"path":"https://iancero.github.io/checkthat/reference/at_least.html","id":null,"dir":"Reference","previous_headings":"","what":"Facilitate ","title":"Facilitate ","text":"function facilitates comparison check least specified proportion count values logical vector evaluate TRUE.","code":""},{"path":"https://iancero.github.io/checkthat/reference/at_least.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facilitate ","text":"","code":"at_least(logical_vec, p = NULL, n = NULL, na.rm = FALSE)"},{"path":"https://iancero.github.io/checkthat/reference/at_least.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facilitate ","text":"logical_vec logical vector. p Proportion value (0 1) compare . n Count value (integer) compare . na.rm Logical. missing values removed calculation?","code":""},{"path":"https://iancero.github.io/checkthat/reference/at_least.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facilitate ","text":"TRUE condition met least specified proportion count, otherwise FALSE.","code":""},{"path":[]},{"path":"https://iancero.github.io/checkthat/reference/at_least.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Facilitate ","text":"","code":"# Check if at least 50% of values are TRUE at_least(c(TRUE, TRUE, FALSE), p = 0.5) # Returns TRUE #> [1] TRUE"},{"path":"https://iancero.github.io/checkthat/reference/at_most.html","id":null,"dir":"Reference","previous_headings":"","what":"Facilitate ","title":"Facilitate ","text":"function facilitates comparison check specified proportion count values logical vector evaluate TRUE.","code":""},{"path":"https://iancero.github.io/checkthat/reference/at_most.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facilitate ","text":"","code":"at_most(logical_vec, p = NULL, n = NULL, na.rm = FALSE)"},{"path":"https://iancero.github.io/checkthat/reference/at_most.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facilitate ","text":"logical_vec logical vector. p Proportion value (0 1) compare . n Count value (integer) compare . na.rm Logical. missing values removed calculation?","code":""},{"path":"https://iancero.github.io/checkthat/reference/at_most.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facilitate ","text":"TRUE condition met specified proportion count, otherwise FALSE.","code":""},{"path":[]},{"path":"https://iancero.github.io/checkthat/reference/at_most.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Facilitate ","text":"","code":"# Check if at most 20% of values are TRUE at_most(c(TRUE, FALSE, TRUE, TRUE), p = 0.2)  # Returns TRUE #> [1] FALSE"},{"path":"https://iancero.github.io/checkthat/reference/check_that.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that assertions about a dataframe are true/false — check_that","title":"Check that assertions about a dataframe are true/false — check_that","text":"function allows test whether set assertions dataframe true print results tests. particularly useful quality control data validation.","code":""},{"path":"https://iancero.github.io/checkthat/reference/check_that.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that assertions about a dataframe are true/false — check_that","text":"","code":"check_that(.data, ..., print = TRUE, raise_error = TRUE, encourage = TRUE)"},{"path":"https://iancero.github.io/checkthat/reference/check_that.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that assertions about a dataframe are true/false — check_that","text":".data dataframe tested. ... One conditions test dataframe. condition expressed logical expression evaluates single TRUE FALSE value (e.g., (x < 3), !(.na(x))). print Logical. TRUE, results tests printed. raise_error Logical. TRUE, error thrown test fails. FALSE, evaluation continue even tests fail. Disabling errors can sometimes useful debugging, generally avoided finalized checks/tests. encourage Logical. TRUE, encouraging messages displayed tests pass.","code":""},{"path":"https://iancero.github.io/checkthat/reference/check_that.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that assertions about a dataframe are true/false — check_that","text":"(invisibly) original, unmodified .data dataframe.","code":""},{"path":"https://iancero.github.io/checkthat/reference/check_that.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check that assertions about a dataframe are true/false — check_that","text":"check_that() function designed work base R's existing logical functions, well several new functions provided checkthat package. addition, also provides data pronoun, .d. copy .data dataframe provided first argument useful testing features specific rows columns, entire dataframe, see examples.","code":""},{"path":[]},{"path":[]},{"path":"https://iancero.github.io/checkthat/reference/checkthat-package.html","id":null,"dir":"Reference","previous_headings":"","what":"checkthat: Implements Unit Testing For Data Manipulation Pipelines — checkthat-package","title":"checkthat: Implements Unit Testing For Data Manipulation Pipelines — checkthat-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://iancero.github.io/checkthat/reference/checkthat-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"checkthat: Implements Unit Testing For Data Manipulation Pipelines — checkthat-package","text":"Maintainer: Ian Cero ian_cero@urmc.rochester.edu (ORCID)","code":""},{"path":"https://iancero.github.io/checkthat/reference/exactly_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Facilitate ","title":"Facilitate ","text":"function facilitates comparison check proportion count values logical vector exactly equal specified value.","code":""},{"path":"https://iancero.github.io/checkthat/reference/exactly_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facilitate ","text":"","code":"exactly_equal(logical_vec, p = NULL, n = NULL, na.rm = FALSE)"},{"path":"https://iancero.github.io/checkthat/reference/exactly_equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facilitate ","text":"logical_vec logical vector. p Proportion value (0 1) compare . n Count value (integer) compare . na.rm Logical. missing values removed calculation?","code":""},{"path":"https://iancero.github.io/checkthat/reference/exactly_equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facilitate ","text":"TRUE proportion count values exactly equal specified value, otherwise FALSE.","code":""},{"path":[]},{"path":"https://iancero.github.io/checkthat/reference/exactly_equal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Facilitate ","text":"","code":"# Check if all values are TRUE exactly_equal(c(TRUE, TRUE, TRUE), p = 1.0)  # Returns TRUE #> [1] TRUE"},{"path":"https://iancero.github.io/checkthat/reference/for_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — for_case","title":"Title — for_case","text":"Title","code":""},{"path":"https://iancero.github.io/checkthat/reference/for_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — for_case","text":"","code":"for_case(case, ...)"},{"path":"https://iancero.github.io/checkthat/reference/for_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — for_case","text":"...","code":""},{"path":"https://iancero.github.io/checkthat/reference/is_logical_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Vector is a Valid Logical Vector — is_logical_vec","title":"Check if a Vector is a Valid Logical Vector — is_logical_vec","text":"function checks given vector valid logical vector. valid logical vector one contains logical values (TRUE FALSE), length least 1, consist entirely missing values (NA).","code":""},{"path":"https://iancero.github.io/checkthat/reference/is_logical_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Vector is a Valid Logical Vector — is_logical_vec","text":"","code":"is_logical_vec(logical_vec)"},{"path":"https://iancero.github.io/checkthat/reference/is_logical_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Vector is a Valid Logical Vector — is_logical_vec","text":"logical_vec vector evaluated.","code":""},{"path":"https://iancero.github.io/checkthat/reference/is_logical_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Vector is a Valid Logical Vector — is_logical_vec","text":"TRUE logical_vec valid logical vector, otherwise FALSE.","code":""},{"path":"https://iancero.github.io/checkthat/reference/is_logical_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a Vector is a Valid Logical Vector — is_logical_vec","text":"","code":"# Check if a valid logical vector is_logical_vec(c(TRUE, FALSE, TRUE))  # Returns TRUE #> [1] TRUE  # Check if an empty vector is_logical_vec(c())  # Returns FALSE #> [1] FALSE  # Check if a vector with missing values is_logical_vec(c(TRUE, FALSE, NA))  # Returns TRUE #> [1] TRUE is_logical_vec(c(NA, NA, NA))  # Returns FALSE #> [1] FALSE"},{"path":"https://iancero.github.io/checkthat/reference/less_than.html","id":null,"dir":"Reference","previous_headings":"","what":"Facilitate ","title":"Facilitate ","text":"function facilitates comparison check less specified proportion count values logical vector evaluate TRUE.","code":""},{"path":"https://iancero.github.io/checkthat/reference/less_than.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facilitate ","text":"","code":"less_than(logical_vec, p = NULL, n = NULL, na.rm = FALSE)"},{"path":"https://iancero.github.io/checkthat/reference/less_than.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facilitate ","text":"logical_vec logical vector. p Proportion value (0 1) compare . n Count value (integer) compare . na.rm Logical. missing values removed calculation?","code":""},{"path":"https://iancero.github.io/checkthat/reference/less_than.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facilitate ","text":"TRUE condition met less specified proportion count, otherwise FALSE.","code":""},{"path":[]},{"path":"https://iancero.github.io/checkthat/reference/less_than.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Facilitate ","text":"","code":"# Check if less than 10% of values are TRUE less_than(c(TRUE, FALSE, FALSE), p = 0.1)  # Returns FALSE #> [1] FALSE"},{"path":"https://iancero.github.io/checkthat/reference/more_than.html","id":null,"dir":"Reference","previous_headings":"","what":"Facilitate ","title":"Facilitate ","text":"function facilitates comparison check specified proportion count values logical vector evaluate TRUE.","code":""},{"path":"https://iancero.github.io/checkthat/reference/more_than.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facilitate ","text":"","code":"more_than(logical_vec, p = NULL, n = NULL, na.rm = FALSE)"},{"path":"https://iancero.github.io/checkthat/reference/more_than.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facilitate ","text":"logical_vec logical vector. p Proportion value (0 1) compare . n Count value (integer) compare . na.rm Logical. missing values removed calculation?","code":""},{"path":"https://iancero.github.io/checkthat/reference/more_than.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facilitate ","text":"TRUE condition met specified proportion count, otherwise FALSE.","code":""},{"path":[]},{"path":"https://iancero.github.io/checkthat/reference/more_than.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Facilitate ","text":"","code":"# Check if more than 70% of values are TRUE more_than(c(TRUE, TRUE, FALSE, TRUE), p = 0.7)  # Returns TRUE #> [1] TRUE"},{"path":"https://iancero.github.io/checkthat/reference/prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Proportion of TRUE Values in a Logical Vector — prop","title":"Calculate Proportion of TRUE Values in a Logical Vector — prop","text":"function calculates proportion TRUE values logical vector.","code":""},{"path":"https://iancero.github.io/checkthat/reference/prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Proportion of TRUE Values in a Logical Vector — prop","text":"","code":"prop(logical_vec, na.rm = FALSE)"},{"path":"https://iancero.github.io/checkthat/reference/prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Proportion of TRUE Values in a Logical Vector — prop","text":"logical_vec logical vector. na.rm Logical. missing values removed calculation? Behaves similar base::mean, removing missing values numerator denominator proportion calculation.","code":""},{"path":"https://iancero.github.io/checkthat/reference/prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Proportion of TRUE Values in a Logical Vector — prop","text":"proportion TRUE values logical vector.","code":""},{"path":"https://iancero.github.io/checkthat/reference/prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Proportion of TRUE Values in a Logical Vector — prop","text":"","code":"prop(c(TRUE, TRUE, FALSE, TRUE)) # Returns 0.75 #> [1] 0.75 prop(c(TRUE, FALSE, TRUE, FALSE, NA), na.rm = TRUE) # Returns 0.5 #> [1] 0.5"},{"path":"https://iancero.github.io/checkthat/reference/some_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — some_of","title":"Title — some_of","text":"Title","code":""},{"path":"https://iancero.github.io/checkthat/reference/some_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — some_of","text":"","code":"some_of(logical_vec, ...)"},{"path":"https://iancero.github.io/checkthat/reference/some_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — some_of","text":"...","code":""},{"path":"https://iancero.github.io/checkthat/reference/whenever.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — whenever","title":"Title — whenever","text":"Title","code":""},{"path":"https://iancero.github.io/checkthat/reference/whenever.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — whenever","text":"","code":"whenever(is_observed, then_expect, ...)"},{"path":"https://iancero.github.io/checkthat/reference/whenever.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — whenever","text":"...","code":""}]
